// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}


model User {  
  id                  Int           @id @default(autoincrement())
  uuid                String        @default(uuid()) 
  name                String? 
  email               String        @unique
  emailVerified       DateTime? 
  image               String? 
  hashedPassword      String? 
  firstName           String? 
  lastName            String? 
  role                String? 
  updatedAt           DateTime      @default(now()) @updatedAt
  createdAt           DateTime      @default(now())
  favoriteIds         Favorite[]    
  posts               Post[]  
  profile             Profile?
  account             Account[]
  listing             Listing[]
  reservation         Reservation[]
} 



model Account { 
  Id                  Int           @id @default(autoincrement())
  uuid                String        @default(uuid()) 
  type                String
  provider            String
  providerAccountId   String
  refresh_token       String?       
  access_token        String?       
  expires_at          Int? 
  token_type          String?
  scope               String?
  id_token            String?       
  session_state       String?

  user         User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int                  @unique
  @@unique([provider, providerAccountId])
}

model Favorite {
  Id                  Int           @id @default(autoincrement())
  uuid                String        @default(uuid())
  userfavorite        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              Int
}

model Post {
  Id                  Int           @id @default(autoincrement())
  uuid                String        @default(uuid())
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  title               String        @db.VarChar(255)
  content             String?
  published           Boolean       @default(false)
  author              User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId            Int
}

model Profile {
  Id                  Int           @id @default(autoincrement())
  uuid                String        @default(uuid())
  bio                 String?
  imageUrl            String?       @db.Text
  userProfile         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              Int           @unique

  servers Server[]
  members Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Listing {
  Id             Int             @id @default(autoincrement()) @map("_id")
  title String
  description String
  imageSrc String
  createdAt DateTime @default(now())
  category  String
  locationValue String
  price Int
  userResrvation User @relation(fields: [userId], references: [id], onDelete: Cascade)
  reservations Reservation[]
  userId  Int @unique
}

model Reservation {
  Id Int                @id @default(autoincrement()) @map("_Id")
  
  startDate DateTime
  endDate DateTime
  totalPrice Int
  createdAt DateTime @default(now())

  userListing User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int 
  listing Listing @relation(fields: [listingId], references: [Id], onDelete: Cascade)
  listingId Int 
}

model Server {
  id String @id @default(uuid())
  name String
  imageUrl String @db.Text
  inviteCode String @unique

  profileId Int
  profile Profile @relation(fields: [profileId], references: [Id], onDelete: Cascade)

  members Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id String @id @default(uuid())
  role MemberRole @default(GUEST)

  profile Profile @relation(fields: [profileId], references: [Id], onDelete: Cascade)
  profileId Int

  serverId String
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]
  directMessages DirectMessage[]

  conversationsInitiated Conversation[] @relation("MemberOne")
  conversationsReceived Conversation[] @relation("MemberTwo")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id String @id @default(uuid())
  name String
  type ChannelType @default(TEXT)

  profile Profile @relation(fields: [profileId], references: [Id], onDelete: Cascade)
  profileId Int

  serverId String
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

model Message {
  id String @id @default(uuid())
  content String @db.Text

  fileUrl String? @db.Text

  memberId String
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  channelId String
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([channelId])
  @@index([memberId])
}

model Conversation {
  id String @id @default(uuid())

  memberOneId String
  memberOne Member @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)

  memberTwoId String
  memberTwo Member @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

  directMessages DirectMessage[]

  @@index([memberTwoId])

  @@unique([memberOneId, memberTwoId])
}

model DirectMessage {
  id String @id @default(uuid())
  content String @db.Text
  fileUrl String? @db.Text

  memberId String
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  conversationId String
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberId])
  @@index([conversationId])
}